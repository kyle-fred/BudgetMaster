-- Create Budget Table with savings as a generated column
CREATE TABLE public.BUDGETS (
    ID BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TOTAL_INCOME NUMERIC(19, 2) NOT NULL DEFAULT 0,
    TOTAL_EXPENSE NUMERIC(19, 2) NOT NULL DEFAULT 0,
    SAVINGS NUMERIC(19, 2) NOT NULL DEFAULT 0,
    CURRENCY VARCHAR(3) NOT NULL DEFAULT 'GBP',
    MONTH VARCHAR(255) NOT NULL UNIQUE,
    CREATED_AT TIMESTAMP NOT NULL DEFAULT NOW(),
    LAST_UPDATED_AT TIMESTAMP NOT NULL DEFAULT NOW()
);
CREATE INDEX idx_budget_month ON public.BUDGETS (MONTH);

-- Create Income Table
CREATE TABLE public.INCOMES (
    ID BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    SOURCE VARCHAR(255) NOT NULL,
    AMOUNT NUMERIC(19, 2) NOT NULL,
    CURRENCY VARCHAR(3) NOT NULL DEFAULT 'GBP',
    MONTH VARCHAR(255) NOT NULL,
    TYPE VARCHAR(255) NOT NULL,
    CREATED_AT TIMESTAMP NOT NULL DEFAULT NOW(),
    LAST_UPDATED_AT TIMESTAMP NOT NULL DEFAULT NOW()
);

-- Create Expense Table
CREATE TABLE public.EXPENSES (
    ID BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    CATEGORY VARCHAR(255) NOT NULL,
    AMOUNT NUMERIC(19, 2) NOT NULL,
    CURRENCY VARCHAR(3) NOT NULL DEFAULT 'GBP',
    MONTH VARCHAR(255) NOT NULL,
    TYPE VARCHAR(255) NOT NULL,
    CREATED_AT TIMESTAMP NOT NULL DEFAULT NOW(),
    LAST_UPDATED_AT TIMESTAMP NOT NULL DEFAULT NOW()
);

-- Create function to update last_updated_at timestamp
CREATE OR REPLACE FUNCTION update_last_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.LAST_UPDATED_AT = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers for each table to update last_updated_at before update
CREATE TRIGGER set_last_updated_at_on_budget
BEFORE UPDATE ON BUDGETS
FOR EACH ROW
EXECUTE FUNCTION update_last_updated_at_column();

CREATE TRIGGER set_last_updated_at_on_income
BEFORE UPDATE ON INCOMES
FOR EACH ROW
EXECUTE FUNCTION update_last_updated_at_column();

CREATE TRIGGER set_last_updated_at_on_expense
BEFORE UPDATE ON EXPENSES
FOR EACH ROW
EXECUTE FUNCTION update_last_updated_at_column();

-- -- Create a function to update the budget table whenever income is modified
-- CREATE OR REPLACE FUNCTION update_budget_total_income()
-- RETURNS TRIGGER AS $$
-- BEGIN
--     IF TG_OP = 'INSERT' OR (TG_OP = 'UPDATE' AND NEW.MONTH <> OLD.MONTH) THEN
--         IF NOT EXISTS (SELECT 1 FROM BUDGETS WHERE MONTH = NEW.MONTH) THEN
--             INSERT INTO BUDGETS (MONTH, TOTAL_INCOME, TOTAL_EXPENSE, COMMON_CURRENCY, CREATED_AT, LAST_UPDATED_AT)
--             VALUES (NEW.MONTH, 0, 0, NEW.CURRENCY, NOW(), NOW());
--         END IF;
--     END IF;

--     IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
--         IF TG_OP = 'UPDATE' AND OLD.MONTH <> NEW.MONTH THEN
--             UPDATE BUDGETS
--             SET TOTAL_INCOME = (SELECT COALESCE(SUM(AMOUNT), 0) FROM INCOMES WHERE MONTH = OLD.MONTH),
--                 LAST_UPDATED_AT = NOW()
--             WHERE MONTH = OLD.MONTH;
--         END IF;

--         UPDATE BUDGETS
--         SET TOTAL_INCOME = (SELECT COALESCE(SUM(AMOUNT), 0) FROM INCOMES WHERE MONTH = NEW.MONTH),
--             LAST_UPDATED_AT = NOW()
--         WHERE MONTH = NEW.MONTH;
--     END IF;

--     IF TG_OP = 'DELETE' THEN
--         UPDATE BUDGETS
--         SET TOTAL_INCOME = (SELECT COALESCE(SUM(AMOUNT), 0) FROM INCOMES WHERE MONTH = OLD.MONTH),
--             LAST_UPDATED_AT = NOW()
--         WHERE MONTH = OLD.MONTH;
--     END IF;

--     RETURN NEW;
-- END;
-- $$ LANGUAGE plpgsql;

-- -- Create triggers for INSERT, UPDATE, DELETE for income table
-- CREATE TRIGGER sync_budget_total_income
-- AFTER INSERT OR UPDATE OR DELETE ON INCOMES
-- FOR EACH ROW
-- EXECUTE FUNCTION update_budget_total_income();

-- -- Create a function to update the budget table whenever expense is modified
-- CREATE OR REPLACE FUNCTION update_budget_total_expense()
-- RETURNS TRIGGER AS $$
-- BEGIN
--     IF TG_OP = 'INSERT' OR (TG_OP = 'UPDATE' AND NEW.MONTH <> OLD.MONTH) THEN
--         IF NOT EXISTS (SELECT 1 FROM BUDGETS WHERE MONTH = NEW.MONTH) THEN
--             INSERT INTO BUDGETS (MONTH, TOTAL_INCOME, TOTAL_EXPENSE, CREATED_AT, LAST_UPDATED_AT)
--             VALUES (NEW.MONTH, 0, 0, NOW(), NOW());
--         END IF;
--     END IF;

--     IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
--         IF TG_OP = 'UPDATE' AND OLD.MONTH <> NEW.MONTH THEN
--             UPDATE BUDGETS
--             SET TOTAL_EXPENSE = (SELECT COALESCE(SUM(AMOUNT), 0) FROM EXPENSES WHERE MONTH = OLD.MONTH),
--                 LAST_UPDATED_AT = NOW()
--             WHERE MONTH = OLD.MONTH;
--         END IF;

--         UPDATE BUDGETS
--         SET TOTAL_EXPENSE = (SELECT COALESCE(SUM(AMOUNT), 0) FROM EXPENSES WHERE MONTH = NEW.MONTH),
--             LAST_UPDATED_AT = NOW()
--         WHERE MONTH = NEW.MONTH;
--     END IF;

--     IF TG_OP = 'DELETE' THEN
--         UPDATE BUDGETS
--         SET TOTAL_EXPENSE = (SELECT COALESCE(SUM(AMOUNT), 0) FROM EXPENSES WHERE MONTH = OLD.MONTH),
--             LAST_UPDATED_AT = NOW()
--         WHERE MONTH = OLD.MONTH;
--     END IF;

--     RETURN NEW;
-- END;
-- $$ LANGUAGE plpgsql;

-- -- Create triggers for INSERT, UPDATE, DELETE for expense table
-- CREATE TRIGGER sync_budget_total_expense
-- AFTER INSERT OR UPDATE OR DELETE ON EXPENSES
-- FOR EACH ROW
-- EXECUTE FUNCTION update_budget_total_expense();
